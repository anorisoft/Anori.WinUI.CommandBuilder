<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Anori.WinUI.Commands</name>
    </assembly>
    <members>
        <member name="T:Anori.WinUI.Commands.Builder.AsyncCommandBuilder">
            <summary>
                Async Command Builder.
            </summary>
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IAsyncCommandBuilder" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IAsyncCanExecuteBuilder" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IActivatableAsyncCommandBuilder" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IActivatableAsyncCanExecuteBuilder" />
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.execute">
            <summary>
                The execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.observes">
            <summary>
                The observes.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.canExecuteFunction">
            <summary>
                The can execute function.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.canExecuteSubject">
            <summary>
                The can execute expression.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.isAutoActivate">
            <summary>
                The is automatic actiate.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.#ctor(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Builder.AsyncCommandBuilder" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <exception cref="T:System.ArgumentNullException">execute in null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>
                Result of ObservesCanExecute as AsyncCommandBuilder.
            </returns>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">CommandBuilder Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCanExecuteBuilder#Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>
                Activatable Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCommandBuilder#Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>
                The Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>The Async Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCanExecuteBuilder#AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>
                The Activatable Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCommandBuilder#AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>
                The Activatable Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>
                The Async Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCanExecuteBuilder#Build(System.Action{Anori.WinUI.Commands.Interfaces.IActivatableAsyncCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Activatable Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCanExecuteBuilder#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>The Activatable Async CanExecute Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCommandBuilder#Build(System.Action{Anori.WinUI.Commands.Interfaces.IActivatableAsyncCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Activatable Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCommandBuilder#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Activatable Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCanExecuteBuilder#Build(System.Action{Anori.WinUI.Commands.Interfaces.IAsyncCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                The Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCanExecuteBuilder#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                The Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCommandBuilder#Build(System.Action{Anori.WinUI.Commands.Interfaces.IAsyncCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                The Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCommandBuilder#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                The Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Build(System.Action{Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                The Async CanExecuteObserver Command Builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">setCommand is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>The Async CanExecute Observer Command.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.NoCanExecuteException">No CanExecute Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.BuildActivatable(System.Action{Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                The Activatable Async CanExecuteObserver Command.
            </returns>
            <exception cref="T:System.ArgumentNullException">setCommand is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.BuildActivatable">
            <summary>
                Builds this instance.
            </summary>
            <returns>The Activatable Async CanExecute Observer Command.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.NoCanExecuteException">No Can Execute Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCommandBuilder#CanExecute(System.Func{System.Boolean})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                The Activatable Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCommandBuilder#CanExecute(Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                The Activatable Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCommandBuilder#CanExecute(Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                The Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCommandBuilder#CanExecute(System.Func{System.Boolean})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                The Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.CanExecute(System.Func{System.Boolean})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>The Async Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">CommandBuilder Exception.</exception>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCanExecuteBuilder#Observes(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject)">
            <summary>
                Observeses the specified observer.
            </summary>
            <param name="observer">The observer.</param>
            <returns>
                The Activatable Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCanExecuteBuilder#Observes(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject)">
            <summary>
                Observeses the specified observer.
            </summary>
            <param name="observer">The observer.</param>
            <returns>
                The Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCommandBuilder#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                The Activatable Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCommandBuilder#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>
                The Activatable Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCommandBuilder#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                The Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Thes AsyncCommandBuilder.
            </returns>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">Command Builder Exception. </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCanExecuteBuilder#ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>
                The Activatable Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCanExecuteBuilder#ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>
                Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCommandBuilder#ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>
                The Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>The Async Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">CommandBuilder Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCanExecuteBuilder#ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
                The Activatable Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCanExecuteBuilder#ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="canExecute">The can execute.</param>
            <returns>
                Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder.ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>The Async Command Builder.</returns>
            <exception cref="T:System.ArgumentNullException">expression is null.</exception>
        </member>
        <member name="T:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1">
            <summary>
                The Asynchronous Command Builder class.
            </summary>
            <typeparam name="T">Parameter Type.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IAsyncCommandBuilder`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IAsyncCanExecuteBuilder`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IActivatableAsyncCommandBuilder`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IActivatableAsyncCanExecuteBuilder`1" />
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.execute">
            <summary>
                The execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.observes">
            <summary>
                The observes.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.canExecuteFunction">
            <summary>
                The can execute function.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.canExecuteSubject">
            <summary>
                The can execute expression.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.isAutoActiate">
            <summary>
                The is automatic actiate.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <exception cref="T:System.ArgumentNullException">execute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCanExecuteBuilder{T}#Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>
                Activatable Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCommandBuilder{T}#Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>
                Activatable Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>Async Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCanExecuteBuilder{T}#AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>
                Result of AutoActivate as IActivatableAsyncCanExecuteBuilder&lt;T&gt;.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCommandBuilder{T}#AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>
                Activatable Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>Asyn Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCanExecuteBuilder{T}#Build(System.Action{Anori.WinUI.Commands.Interfaces.IActivatableAsyncCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Activatable Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCanExecuteBuilder{T}#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Activatable Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCommandBuilder{T}#Build(System.Action{Anori.WinUI.Commands.Interfaces.IActivatableAsyncCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Activatable Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCommandBuilder{T}#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Activatable Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCanExecuteBuilder{T}#Build(System.Action{Anori.WinUI.Commands.Interfaces.IAsyncCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCanExecuteBuilder{T}#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCommandBuilder{T}#Build(System.Action{Anori.WinUI.Commands.Interfaces.IAsyncCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCommandBuilder{T}#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>Async Can Execute Observer Command.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.NoCanExecuteException">No Can Execute Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Build(System.Action{Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>Async Can Execute Observer Command.</returns>
            <exception cref="T:System.ArgumentNullException">setCommand is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.BuildActicatable">
            <summary>
                Builds this instance.
            </summary>
            <returns>Activatable Async Can Execute Observer Command.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.NoCanExecuteException">No CanExecute Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.BuildActivatable(System.Action{Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>Activatable Async Can Execute Observer Command.</returns>
            <exception cref="T:System.ArgumentNullException">setCommand is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCommandBuilder{T}#CanExecute(System.Predicate{`0})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Activatable Async CanExecute Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCommandBuilder{T}#CanExecute(Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Activatable Async CanExecute Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCommandBuilder{T}#CanExecute(Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCommandBuilder{T}#CanExecute(System.Predicate{`0})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.CanExecute(System.Predicate{`0})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Async Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">
                Command Builder Exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCanExecuteBuilder{T}#Observes(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject)">
            <summary>
                Observeses the specified observer.
            </summary>
            <param name="observer">The observer.</param>
            <returns>
                The Activatable Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCanExecuteBuilder{T}#Observes(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject)">
            <summary>
                Observeses the specified observer.
            </summary>
            <param name="observer">The observer.</param>
            <returns>
                Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCommandBuilder{T}#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Activatable Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCommandBuilder{T}#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>
                Activatable Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCommandBuilder{T}#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Async Command Builder.</returns>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">Command Builder Exception. </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>Async Command Builder.</returns>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">Command Builder Exception. </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCanExecuteBuilder{T}#ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>
                The Activatable Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCanExecuteBuilder{T}#ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>
                Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCommandBuilder{T}#ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>
                Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>Async Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">Command Builder Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableAsyncCanExecuteBuilder{T}#ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
                The Activatable Async CanExecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IAsyncCanExecuteBuilder{T}#ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="canExecute">The can execute.</param>
            <returns>
                Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.AsyncCommandBuilder`1.ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>Async Command Builder.</returns>
        </member>
        <member name="T:Anori.WinUI.Commands.Builder.CommandBuilder">
            <summary>
                Command Builder.
                Class to create Command based on ICommand.
            </summary>
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.ICommandBuilder" />
        </member>
        <member name="P:Anori.WinUI.Commands.Builder.CommandBuilder.Builder">
            <summary>
                Gets the builder.
            </summary>
            <value>
                The builder.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.CommandBuilder.Command(System.Action)">
            <summary>
                Commands the specified execute.
            </summary>
            <param name="execute">The execute.</param>
            <returns>
                Sync Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.CommandBuilder.Command(System.Action,System.Func{System.Boolean})">
            <summary>
                Commands the specified execute.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <returns>
                Sync Can Excecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.CommandBuilder.Command``1(System.Action{``0})">
            <summary>
                Commands the specified execute.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <param name="execute">The execute.</param>
            <returns>
                Sync Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.CommandBuilder.Command``1(System.Action{``0},System.Predicate{``0})">
            <summary>
                Commands the specified execute.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <returns>
                Sync Can Excecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.CommandBuilder.Command(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Commands the specified execute.
            </summary>
            <param name="execute">The execute.</param>
            <returns>
                Async Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.CommandBuilder.Command(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean})">
            <summary>
                Commands the specified execute.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <returns>
                Async Can Excecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.CommandBuilder.Command``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
                Commands the specified execute.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <param name="execute">The execute.</param>
            <returns>
                Async Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.CommandBuilder.Command``1(System.Func{``0,System.Threading.Tasks.Task},System.Predicate{``0})">
            <summary>
                Commands the specified execute.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <returns>
                Async Can Excecute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.CommandBuilder.Command(System.Action{System.Threading.CancellationToken})">
            <summary>
                Commands the specified execute.
            </summary>
            <param name="execute">The execute.</param>
            <returns>
                Concurrency Sync Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.CommandBuilder.Command``1(System.Action{``0,System.Threading.CancellationToken})">
            <summary>
                Commands the specified execute.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <param name="execute">The execute.</param>
            <returns>
                Concurrency Sync Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.CommandBuilder.Command(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
                Commands the specified execute.
            </summary>
            <param name="execute">The execute.</param>
            <returns>
                Concurrency Async Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.CommandBuilder.Command``1(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
                Commands the specified execute.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <param name="execute">The execute.</param>
            <returns>
                Concurrency Async Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.CommandBuilder.Command(System.Action{System.Threading.CancellationToken},System.Func{System.Boolean})">
            <summary>
                Commands the specified execute.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <returns>
                Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.CommandBuilder.Command``1(System.Action{``0,System.Threading.CancellationToken},System.Predicate{``0})">
            <summary>
                Commands the specified execute.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <returns>
                Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.CommandBuilder.Command(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Boolean})">
            <summary>
                Commands the specified execute.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.CommandBuilder.Command``1(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Predicate{``0})">
            <summary>
                Commands the specified execute.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="T:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder">
            <summary>The Concurrency Asynchronous Command Builder class.</summary>
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IConcurrencyAsyncCommandBuilder" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IConcurrencyAsyncCanExecuteBuilder" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IActivatableConcurrencyAsyncCommandBuilder" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IActivatableConcurrencyAsyncCanExecuteBuilder" />
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.execute">
            <summary>
                The execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.observes">
            <summary>
                The observes.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.cancelAction">
            <summary>
                The cancel action.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.canExecuteFunction">
            <summary>
                The can execute function.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.canExecuteSubject">
            <summary>
                The can execute expression.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.completedAction">
            <summary>
                The completed action.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.errorAction">
            <summary>
                The error action.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.isAutoActiate">
            <summary>
                The is automatic actiate.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <exception cref="T:System.ArgumentNullException">execute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.CanExecute(System.Func{System.Boolean})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Concurrency Async Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">
                Command Builder Exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCanExecuteBuilder#Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder#Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>Concurrency Async Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCanExecuteBuilder#AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder#AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>Concurrency Async Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCanExecuteBuilder#Build(System.Action{Anori.WinUI.Commands.Interfaces.IActivatableConcurrencyAsyncCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Activatable Concurrency Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCanExecuteBuilder#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Activatable Concurrency Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Activatable Concurrency Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder#Build(System.Action{Anori.WinUI.Commands.Interfaces.IActivatableConcurrencyAsyncCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Activatable Concurrency Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCanExecuteBuilder#Build(System.Action{Anori.WinUI.Commands.Interfaces.IConcurrencyAsyncCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Concurrency Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCanExecuteBuilder#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Concurrency Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Concurrency Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder#Build(System.Action{Anori.WinUI.Commands.Interfaces.IConcurrencyAsyncCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Concurrency Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Build(System.Action{Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Concurrency Async Can Execute Observer Command.
            </returns>
            <exception cref="T:System.ArgumentNullException">setCommand is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>Concurrency Async Can Execute Observer Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.BuildActivatable(System.Action{Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Activatable Concurrency Async Can Execute Observer Command.
            </returns>
            <exception cref="T:System.ArgumentNullException">setCommand is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.BuildActivatable">
            <summary>
                Builds this instance.
            </summary>
            <returns>Activatable Concurrency  Async Can Execute Observer Command.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.NoCanExecuteException">No Can Execute Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder#CanExecute(System.Func{System.Boolean})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder#CanExecute(Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder#CanExecute(Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder#CanExecute(System.Func{System.Boolean})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCanExecuteBuilder#Observes(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject)">
            <summary>
                Observeses the specified observer.
            </summary>
            <param name="observer">The observer.</param>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCanExecuteBuilder#Observes(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject)">
            <summary>
                Observeses the specified observer.
            </summary>
            <param name="observer">The observer.</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Concurrency Async Command Builder.</returns>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">
                Command Builder Exception.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>Concurrency Async Command Builder.</returns>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">
                Command Builder Exception.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCanExecuteBuilder#ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCanExecuteBuilder#ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>Concurrency Async Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">Command Builder Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCanExecuteBuilder#ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCanExecuteBuilder#ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>Concurrency Async Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCanExecuteBuilder#OnCancel(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder#OnCancel(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCanExecuteBuilder#OnCancel(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder#OnCancel(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>
                Concurrency Async Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.OnCancel(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>Concurrency Async Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCanExecuteBuilder#OnCompleted(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder#OnCompleted(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCanExecuteBuilder#OnCompleted(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder#OnCompleted(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>
                Concurrency Async Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.OnCompleted(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>Concurrency Async Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCanExecuteBuilder#OnError(System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder#OnError(System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCanExecuteBuilder#OnError(System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder#OnError(System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>
                Concurrency Async Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder.OnError(System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>Concurrency Async Command Builder.</returns>
        </member>
        <member name="T:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1">
            <summary>
                The Concurrency Asynchronous Command Builder class.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IConcurrencyAsyncCommandBuilder`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IConcurrencyAsyncCanExecuteBuilder`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IActivatableConcurrencyAsyncCommandBuilder`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IActivatableConcurrencyAsyncCanExecuteBuilder`1" />
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.execute">
            <summary>
                The execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.observes">
            <summary>
                The observes.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.cancelAction">
            <summary>
                The cancel action.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.canExecuteFunction">
            <summary>
                The can execute function.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.canExecuteSubject">
            <summary>
                The can execute expression.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.completedAction">
            <summary>
                The completed action.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.errorAction">
            <summary>
                The error action.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.isAutoActiate">
            <summary>
                The is automatic actiate.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <exception cref="T:System.ArgumentNullException">execute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCanExecuteBuilder{T}#Build(System.Action{Anori.WinUI.Commands.Interfaces.IActivatableConcurrencyAsyncCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Activatable Concurrency Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCanExecuteBuilder{T}#ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCanExecuteBuilder{T}#Observes(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject)">
            <summary>
                Observeses the specified observer.
            </summary>
            <param name="observer">The observer.</param>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCanExecuteBuilder{T}#ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCanExecuteBuilder{T}#AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCanExecuteBuilder{T}#OnError(System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCanExecuteBuilder{T}#OnCompleted(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCanExecuteBuilder{T}#OnCancel(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder{T}#OnError(System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>
                Activatable Concurrency Async Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder{T}#OnCompleted(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>
                Activatable Concurrency Async Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder{T}#OnCancel(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>
                Activatable Concurrency Async Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCanExecuteBuilder{T}#OnError(System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCanExecuteBuilder{T}#OnCompleted(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCanExecuteBuilder{T}#OnCancel(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCanExecuteBuilder{T}#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Activatable Concurrency Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder{T}#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Activatable Concurrency Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder{T}#Build(System.Action{Anori.WinUI.Commands.Interfaces.IActivatableConcurrencyAsyncCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Activatable Concurrency Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder{T}#CanExecute(System.Predicate{`0})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder{T}#CanExecute(Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder{T}#CanExecute(Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Concurrency Async Command vBuilder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder{T}#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder{T}#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencyAsyncCommandBuilder{T}#AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCanExecuteBuilder{T}#Observes(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject)">
            <summary>
                Observeses the specified observer.
            </summary>
            <param name="observer">The observer.</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCanExecuteBuilder{T}#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Concurrency Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCanExecuteBuilder{T}#ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCanExecuteBuilder{T}#ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCanExecuteBuilder{T}#Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>
                Activatable Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCanExecuteBuilder{T}#Build(System.Action{Anori.WinUI.Commands.Interfaces.IConcurrencyAsyncCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Concurrency Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder{T}#Build(System.Action{Anori.WinUI.Commands.Interfaces.IConcurrencyAsyncCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Concurrency Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder{T}#Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>
                Activatable Concurrency Async Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder{T}#OnError(System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>
                Concurrency Async Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder{T}#OnCompleted(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>
                Concurrency Async Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder{T}#OnCancel(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>
                Concurrency Async Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder{T}#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder{T}#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>
                Concurrency Async Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder{T}#CanExecute(System.Predicate{`0})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Concurrency Async Command Can Execute Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencyAsyncCommandBuilder{T}#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Concurrency Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.CanExecute(System.Predicate{`0})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Concurrency Async Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">Command Builder Exception.</exception>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.BuildActivatable(System.Action{Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Activatable Concurrency Async Can Execute Observer Command.
            </returns>
            <exception cref="T:System.ArgumentNullException">setCommand is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.BuildActivatable">
            <summary>
                Builds this instance.
            </summary>
            <returns>Activatable Concurrency Async Can Execute Observer Command.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.NoCanExecuteException">No Can Execute Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Build(System.Action{Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>Concurrency Async Can Execute Observer Command.</returns>
            <exception cref="T:System.ArgumentNullException">setCommand is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>Concurrency Async Can Execute Observer Command.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.NoCanExecuteException">No Can Execute Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>Concurrency Async Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Concurrency Async Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">Command Builder Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>Concurrency Async Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">
                Command Builder Exception.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>Concurrency Async Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">
                Command Builder Exception.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>
                Concurrency Async Command Builder.
            </returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">Command Builder Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>
                Concurrency Async Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.OnError(System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>
                Concurrency Async Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.OnCompleted(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>
                Concurrency Async Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencyAsyncCommandBuilder`1.OnCancel(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>
                Concurrency Async Command Builder.
            </returns>
        </member>
        <member name="T:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder">
            <summary>
                Concurrency Sync Command Builder.
            </summary>
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IConcurrencySyncCommandBuilder" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IConcurrencySyncCanExecuteBuilder" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IActivatableConcurrencySyncCommandBuilder" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IActivatableConcurrencySyncCanExecuteBuilder" />
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.execute">
            <summary>
                The execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.observes">
            <summary>
                The observes.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.cancelAction">
            <summary>
                The cancel action.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.canExecuteFunction">
            <summary>
                The can execute function.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.canExecuteSubject">
            <summary>
                The can execute subject.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.completedAction">
            <summary>
                The completed action.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.errorAction">
            <summary>
                The error action.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.isAutoActivate">
            <summary>
                The is automatic actiate.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.#ctor(System.Action{System.Threading.CancellationToken})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <exception cref="T:System.ArgumentNullException">execute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCanExecuteBuilder#Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>Activatable Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder#Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>Activatable Concurrency Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>Concurrency Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCanExecuteBuilder#AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>
                Activatable Concurrency Sync CanExecute Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder#AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>Activatable Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>
                Result of AutoActivate as ConcurrencySyncCommandBuilder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCanExecuteBuilder#Build(System.Action{Anori.WinUI.Commands.Interfaces.IActivatableConcurrencySyncCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>Activatable Concurrency Sync Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCanExecuteBuilder#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Activatable Concurrency Sync Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder#Build(System.Action{Anori.WinUI.Commands.Interfaces.IActivatableConcurrencySyncCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>Activatable Concurrency Sync Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>Activatable Concurrency Sync Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCanExecuteBuilder#Build(System.Action{Anori.WinUI.Commands.Interfaces.IConcurrencySyncCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>Concurrency Sync Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCanExecuteBuilder#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>Concurrency Sync Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder#Build(System.Action{Anori.WinUI.Commands.Interfaces.IConcurrencySyncCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>Concurrency Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>Concurrency Sync Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Build(System.Action{Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>Concurrency Sync CanExecute Command.</returns>
            <exception cref="T:System.ArgumentNullException">setCommand is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Concurrency Sync Command.
            </returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.NoCanExecuteException">No CanExecute Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.BuildActivatable(System.Action{Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>Activatable Concurrency Sync CanExecute Command.</returns>
            <exception cref="T:System.ArgumentNullException">setCommand is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.BuildActivatable">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Activatable Concurrency Sync CanExecute Builder.
            </returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.NoCanExecuteException">No CanExecute Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder#CanExecute(System.Func{System.Boolean})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Activatable Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder#CanExecute(Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Activatable Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder#CanExecute(Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder#CanExecute(System.Func{System.Boolean})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.CanExecute(System.Func{System.Boolean})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Concurrency Sync Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">
                CommandBuilder Exception.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCanExecuteBuilder#Observes(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject)">
            <summary>
                Observeses the specified observer.
            </summary>
            <param name="observer">The observer.</param>
            <returns>Activatable Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCanExecuteBuilder#Observes(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject)">
            <summary>
                Observeses the specified observer.
            </summary>
            <param name="observer">The observer.</param>
            <returns>Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Activatable Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>Activatable Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Concurrency Sync Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">CommandBuilder Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>Concurrency Sync Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">CommandBuilder Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCanExecuteBuilder#ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>
                Activatable Concurrency Sync CanExecute Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCanExecuteBuilder#ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>
                Result of ObservesCommandManager as ConcurrencySyncCommandBuilder.
            </returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">CommandBuilder Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCanExecuteBuilder#ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>Activatable Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCanExecuteBuilder#ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>Concurrency Sync Command Builder.</returns>
            <exception cref="T:System.ArgumentNullException">expression is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCanExecuteBuilder#OnCancel(System.Action)">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>
                Activatable Concurrency Sync CanExecute Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder#OnCancel(System.Action)">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>Activatable Concurrency Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCanExecuteBuilder#OnCancel(System.Action)">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder#OnCancel(System.Action)">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>Concurrency Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.OnCancel(System.Action)">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>Concurrency Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCanExecuteBuilder#OnCompleted(System.Action)">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>
                Activatable Concurrency Sync CanExecute Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder#OnCompleted(System.Action)">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>Activatable Concurrency Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCanExecuteBuilder#OnCompleted(System.Action)">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder#OnCompleted(System.Action)">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>Concurrency Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.OnCompleted(System.Action)">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>Concurrency Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCanExecuteBuilder#OnError(System.Action{System.Exception})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>Activatable Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder#OnError(System.Action{System.Exception})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>Activatable Concurrency Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCanExecuteBuilder#OnError(System.Action{System.Exception})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder#OnError(System.Action{System.Exception})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>Concurrency Sync CanExecute Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder.OnError(System.Action{System.Exception})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>Concurrency Sync Command Builder.</returns>
        </member>
        <member name="T:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1">
            <summary>
                The Concurrency Synchronize Command Builder class.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IConcurrencySyncCommandBuilder`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IConcurrencySyncCanExecuteBuilder`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IActivatableConcurrencySyncCommandBuilder`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IActivatableConcurrencySyncCanExecuteBuilder`1" />
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.execute">
            <summary>
                The execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.observes">
            <summary>
                The observes.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.cancelAction">
            <summary>
                The cancel action.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.canExecuteFunction">
            <summary>
                The can execute function.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.canExecuteSubject">
            <summary>
                The can execute expression.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.completedAction">
            <summary>
                The completed action.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.errorAction">
            <summary>
                The error action.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.isAutoActivate">
            <summary>
                The is automatic actiate.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.#ctor(System.Action{`0,System.Threading.CancellationToken})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <exception cref="T:System.ArgumentNullException">execute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCanExecuteBuilder{T}#Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>
                Activatable Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder{T}#Activatable">
            <summary>
                Activateables this instance.
            </summary>
            <returns>
                Activatable Concurrency Sync Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>Concurrency Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.ActivatableCanExecute(Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Activatables the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Activatable Concurrency Sync Can Execute Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCanExecuteBuilder{T}#AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>
                Activatable Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder{T}#AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>
                Activatable Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>Concurrency Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCanExecuteBuilder{T}#Build(System.Action{Anori.WinUI.Commands.Interfaces.IActivatableConcurrencySyncCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Activatable Concurrency Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCanExecuteBuilder{T}#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Activatable Concurrency Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder{T}#Build(System.Action{Anori.WinUI.Commands.Interfaces.IActivatableConcurrencySyncCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Activatable Concurrency Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder{T}#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Activatable Concurrency Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCanExecuteBuilder{T}#Build(System.Action{Anori.WinUI.Commands.Interfaces.IConcurrencySyncCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Concurrency Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCanExecuteBuilder{T}#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Concurrency Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder{T}#Build(System.Action{Anori.WinUI.Commands.Interfaces.IConcurrencySyncCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Concurrency Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder{T}#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Concurrency Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Build(System.Action{Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>Concurrency Sync Can Execute Command Builder.</returns>
            <exception cref="T:System.ArgumentNullException">setCommand is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>Concurrency Sync Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.NoCanExecuteException">No Can Execute Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.BuildActivatable(System.Action{Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>Activatable Concurrency Sync Can Execute Command Builder.</returns>
            <exception cref="T:System.ArgumentNullException">setCommand is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.BuildActivatable">
            <summary>
                Builds this instance.
            </summary>
            <returns>Activatable Concurrency Sync Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.NoCanExecuteException">No Can Execute Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder{T}#CanExecute(System.Predicate{`0})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Activatable Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder{T}#CanExecute(Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Activatable Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder{T}#CanExecute(System.Predicate{`0})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder{T}#CanExecute(Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.CanExecute(Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.CanExecute(System.Predicate{`0})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Concurrency Sync Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">
                Command Builder Exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCanExecuteBuilder{T}#Observes(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject)">
            <summary>
                Observeses the specified observer.
            </summary>
            <param name="observer">The observer.</param>
            <returns>
                Activatable Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCanExecuteBuilder{T}#Observes(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject)">
            <summary>
                Observeses the specified observer.
            </summary>
            <param name="observer">The observer.</param>
            <returns>
                Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder{T}#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Activatable Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder{T}#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>
                Activatable Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder{T}#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder{T}#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>
                Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Concurrency Sync Command Builder.</returns>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">
                Command Builder Exception.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>Concurrency Sync Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">
                Command Builder Exception.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCanExecuteBuilder{T}#ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>
                Activatable Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCanExecuteBuilder{T}#ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>
                Concurrency Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>Concurrency Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCanExecuteBuilder{T}#ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
                Activatable Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCanExecuteBuilder{T}#ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
                Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>Concurrency Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCanExecuteBuilder{T}#OnCancel(System.Action)">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>
                Activatable Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder{T}#OnCancel(System.Action)">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>
                Activatable Concurrency Sync Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCanExecuteBuilder{T}#OnCancel(System.Action)">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>
                Activatable Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder{T}#OnCancel(System.Action)">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>
                Concurrency Sync Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.OnCancel(System.Action)">
            <summary>
                Called when [cancel].
            </summary>
            <param name="cancel">The cancel.</param>
            <returns>Concurrency Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCanExecuteBuilder{T}#OnCompleted(System.Action)">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>
                Activatable Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder{T}#OnCompleted(System.Action)">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>
                Activatable Concurrency Sync Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCanExecuteBuilder{T}#OnCompleted(System.Action)">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>
                Activatable Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder{T}#OnCompleted(System.Action)">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>
                Concurrency Sync Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.OnCompleted(System.Action)">
            <summary>
                Called when [completed].
            </summary>
            <param name="completed">The completed.</param>
            <returns>Concurrency Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCanExecuteBuilder{T}#OnError(System.Action{System.Exception})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>
                Activatable Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableConcurrencySyncCommandBuilder{T}#OnError(System.Action{System.Exception})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>
                Activatable Concurrency Sync Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCanExecuteBuilder{T}#OnError(System.Action{System.Exception})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>
                Concurrency Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IConcurrencySyncCommandBuilder{T}#OnError(System.Action{System.Exception})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>
                Concurrency Sync Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.ConcurrencySyncCommandBuilder`1.OnError(System.Action{System.Exception})">
            <summary>
                Called when [error].
            </summary>
            <param name="error">The error.</param>
            <returns>Concurrency Sync Command Builder.</returns>
        </member>
        <member name="T:Anori.WinUI.Commands.Builder.SyncCommandBuilder">
            <summary>
                The Synchronize Command Builder class.
            </summary>
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.ISyncCommandBuilder" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.ISyncCanExecuteBuilder" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IActivatableSyncCommandBuilder" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IActivatableSyncCanExecuteBuilder" />
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.SyncCommandBuilder.execute">
            <summary>
                The execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.SyncCommandBuilder.observes">
            <summary>
                The observes.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.SyncCommandBuilder.canExecuteFunction">
            <summary>
                The can execute function.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.SyncCommandBuilder.canExecuteSubject">
            <summary>
                The can execute expression.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.SyncCommandBuilder.isAutoActivate">
            <summary>
                The is automatic actiate.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.#ctor(System.Action)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Builder.SyncCommandBuilder" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <exception cref="T:System.ArgumentNullException">execute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Observes(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject)">
            <summary>
                Observeses the specified observer.
            </summary>
            <param name="observer">The observer.</param>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#ISyncCanExecuteBuilder#Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#ISyncCommandBuilder#Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCanExecuteBuilder#AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCommandBuilder#AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCanExecuteBuilder#Build(System.Action{Anori.WinUI.Commands.Interfaces.IActivatableSyncCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>Activatable Sync Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCanExecuteBuilder#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Activatable Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCommandBuilder#Build(System.Action{Anori.WinUI.Commands.Interfaces.IActivatableSyncCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Activatable Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCommandBuilder#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Activatable Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#ISyncCanExecuteBuilder#Build(System.Action{Anori.WinUI.Commands.Interfaces.ISyncCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#ISyncCanExecuteBuilder#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#ISyncCommandBuilder#Build(System.Action{Anori.WinUI.Commands.Interfaces.ISyncCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#ISyncCommandBuilder#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Can Execute Observer Command.
            </returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.NoCanExecuteException">No Can Execute Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Build(System.Action{Anori.WinUI.Commands.Commands.CanExecuteObserverCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>Can Execute Observer Command.</returns>
            <exception cref="T:System.ArgumentNullException">setCommand is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.BuildActivatable(System.Action{Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>Activatable Can Execute Observer Command.</returns>
            <exception cref="T:System.ArgumentNullException">setCommand is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.BuildActivatable">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Activatable Can Execute Observer Command.
            </returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.NoCanExecuteException">No Can Execute Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCommandBuilder#CanExecute(System.Func{System.Boolean})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCommandBuilder#CanExecute(Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#ISyncCommandBuilder#CanExecute(Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#ISyncCommandBuilder#CanExecute(System.Func{System.Boolean})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.CanExecute(System.Func{System.Boolean})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Sync Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">
                Command Builder Exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCanExecuteBuilder#Observes(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject)">
            <summary>
                Observeses the specified observer.
            </summary>
            <param name="observer">The observer.</param>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCommandBuilder#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCommandBuilder#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#ISyncCommandBuilder#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#ISyncCommandBuilder#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>
                Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Sync Command Builder.</returns>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">Command Builder Exception. </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>Sync Command Builder.</returns>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">Command Builder Exception. </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCanExecuteBuilder#ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#ISyncCanExecuteBuilder#ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>Sync Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">Command Builder Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCanExecuteBuilder#ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.Anori#WinUI#Commands#Interfaces#Builders#ISyncCanExecuteBuilder#ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder.ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>Sync Command Builder.</returns>
            <exception cref="T:System.ArgumentNullException">expression is null.</exception>
        </member>
        <member name="T:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1">
            <summary>
                The Synchronize Command Builder class.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.ISyncCommandBuilder`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.ISyncCanExecuteBuilder`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IActivatableSyncCommandBuilder`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.Builders.IActivatableSyncCanExecuteBuilder`1" />
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.execute">
            <summary>
                The execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.observes">
            <summary>
                The observes.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.canExecuteFunction">
            <summary>
                The can execute function.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.canExecuteSubject">
            <summary>
                The can execute expression.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.isAutoActiate">
            <summary>
                The is automatic actiate.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.#ctor(System.Action{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <exception cref="T:System.ArgumentNullException">execute is null.</exception>
            <exception cref="T:Anori.WinUI.Commands.Builder.SyncCommandBuilder">Sync Command Builder.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#ISyncCanExecuteBuilder{T}#Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#ISyncCommandBuilder{T}#Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>
                Activatable Sync Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Activatable">
            <summary>
                Activatables this instance.
            </summary>
            <returns>Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCanExecuteBuilder{T}#AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCommandBuilder{T}#AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>
                Activatable Sync Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.AutoActivate">
            <summary>
                Automatics the activate.
            </summary>
            <returns>Sync Command Builder.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCanExecuteBuilder{T}#Build(System.Action{Anori.WinUI.Commands.Interfaces.IActivatableSyncCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Activatable Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCanExecuteBuilder{T}#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Activatable Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCommandBuilder{T}#Build(System.Action{Anori.WinUI.Commands.Interfaces.IActivatableSyncCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Activatable Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCommandBuilder{T}#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Activatable Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#ISyncCanExecuteBuilder{T}#Build(System.Action{Anori.WinUI.Commands.Interfaces.ISyncCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#ISyncCanExecuteBuilder{T}#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#ISyncCommandBuilder{T}#Build(System.Action{Anori.WinUI.Commands.Interfaces.ISyncCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>
                Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#ISyncCommandBuilder{T}#Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>
                Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Build(System.Action{Anori.WinUI.Commands.Commands.CanExecuteObserverCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>Can Execute Observer Command.</returns>
            <exception cref="T:System.ArgumentNullException">setCommand is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Build">
            <summary>
                Builds this instance.
            </summary>
            <returns>Can Execute Observer Command.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.NoCanExecuteException">No Can Execute Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.BuildActivatable(System.Action{Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand{`0}})">
            <summary>
                Builds the specified set command.
            </summary>
            <param name="setCommand">The set command.</param>
            <returns>Activatable Can Execute Observer Command.</returns>
            <exception cref="T:System.ArgumentNullException">setCommand is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.BuildActivatable">
            <summary>
                Builds this instance.
            </summary>
            <returns>Activatable Can Execute Observer Command.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.NoCanExecuteException">No Can Execute Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCommandBuilder{T}#CanExecute(System.Predicate{`0})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCommandBuilder{T}#CanExecute(Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#ISyncCommandBuilder{T}#CanExecute(Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#ISyncCommandBuilder{T}#CanExecute(System.Predicate{`0})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.CanExecute(System.Predicate{`0})">
            <summary>
                Determines whether this instance can execute the specified can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Sync Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">
                Command Builder Exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCanExecuteBuilder{T}#Observes(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject)">
            <summary>
                Observeses the specified observer.
            </summary>
            <param name="observer">The observer.</param>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#ISyncCanExecuteBuilder{T}#Observes(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject)">
            <summary>
                Observeses the specified observer.
            </summary>
            <param name="observer">The observer.</param>
            <returns>
                Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCommandBuilder{T}#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCommandBuilder{T}#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#ISyncCommandBuilder{T}#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>
                Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#ISyncCommandBuilder{T}#ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>
                Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <returns>Sync Command Builder.</returns>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">
                Command Builder Exception.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Observeses the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>Sync Command Builder.</returns>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">
                Command Builder Exception.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCanExecuteBuilder{T}#ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#ISyncCanExecuteBuilder{T}#ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>
                Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.ObservesCommandManager">
            <summary>
                Observeses the command manager.
            </summary>
            <returns>Sync Command Builder.</returns>
            <exception cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">Command Builder Exception.Command Builder Exception.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#IActivatableSyncCanExecuteBuilder{T}#ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
                Activatable Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.Anori#WinUI#Commands#Interfaces#Builders#ISyncCanExecuteBuilder{T}#ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="canExecute">The can execute.</param>
            <returns>
                Sync Can Execute Command Builder.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Builder.SyncCommandBuilder`1.ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>Sync Command Builder.</returns>
            <exception cref="T:System.ArgumentNullException">expression is null.</exception>
        </member>
        <member name="T:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver">
            <summary>
                CanExecute Observer.
            </summary>
            <seealso cref="!:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserverBase" />
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver.#ctor(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver" /> class.
            </summary>
            <param name="canExecuteExpression">The can execute expression.</param>
            <exception cref="T:System.ArgumentNullException">canExecuteExpression is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver.#ctor(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver" /> class.
            </summary>
            <param name="canExecuteExpression">The can execute expression.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <exception cref="T:System.ArgumentNullException">canExecuteExpression is null.</exception>
        </member>
        <member name="E:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver.Update">
            <summary>
                Occurs when [can execute changed].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver.Create(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
                Creates the specified can execute expression.
            </summary>
            <param name="canExecuteExpression">The can execute expression.</param>
            <returns>Can Execute Observer.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver.Create(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Boolean)">
            <summary>
                Creates the specified can execute expression.
            </summary>
            <param name="canExecuteExpression">The can execute expression.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>Can Execute Observer.</returns>
        </member>
        <member name="T:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserverBase`1">
            <summary>
            CanExecute Observer Base.
            </summary>
            <typeparam name="TPropertyObserver">The type of the property observer.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteObserver" />
        </member>
        <member name="P:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserverBase`1.CanExecute">
            <summary>
                Gets or sets the can execute.
            </summary>
            <value>
                The can execute.
            </value>
        </member>
        <member name="T:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver`2">
            <summary>
                CanExecute Observer with two parameters.
            </summary>
            <typeparam name="TParameter1">The type of the parameter1.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2.</typeparam>
            <seealso cref="!:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserverBase" />
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver`2.#ctor(`0,`1,System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver`2" /> class.
            </summary>
            <param name="parameter1">The parameter1.</param>
            <param name="parameter2">The parameter2.</param>
            <param name="canExecuteExpression">The can execute expression.</param>
            <exception cref="T:System.ArgumentNullException">parameter1 or parameter2 or canExecuteExpression is null.</exception>
        </member>
        <member name="E:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver`2.Update">
            <summary>
                Occurs when [can execute changed].
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver`2.Parameter1">
            <summary>
                Gets the parameter1.
            </summary>
            <value>
                The parameter1.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver`2.Parameter2">
            <summary>
                Gets the parameter2.
            </summary>
            <value>
                The parameter2.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver`2.Create(`0,`1,System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
                Creates the specified owner.
            </summary>
            <param name="parameter1">The owner.</param>
            <param name="parameter2">The parameter2.</param>
            <param name="canExecuteExpression">The can execute expression.</param>
            <returns>CanExecute Observer.</returns>
        </member>
        <member name="T:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver`1">
            <summary>
                CanExecute Observer with one parameters.
            </summary>
            <typeparam name="TParameter1">The type of the parameter.</typeparam>
            <seealso cref="!:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserverBase" />
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver`1.#ctor(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver`1" /> class.
            </summary>
            <param name="parameter">The owner.</param>
            <param name="canExecuteExpression">The can execute expression.</param>
            <exception cref="T:System.ArgumentNullException">
                parameter
                or
                canExecuteExpression is null.
            </exception>
        </member>
        <member name="E:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver`1.Update">
            <summary>
                Occurs when [can execute changed].
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver`1.Parameter">
            <summary>
                Gets the owner.
            </summary>
            <value>
                The owner.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.CanExecuteObserver`1.Create(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Creates the specified owner.
            </summary>
            <param name="parameter">The owner.</param>
            <param name="canExecuteExpression">The can execute expression.</param>
            <returns>The observer.</returns>
        </member>
        <member name="T:Anori.WinUI.Commands.CanExecuteObservers.CommandManagerObserver">
            <summary>
                Command Manager Observer.
            </summary>
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject" />
        </member>
        <member name="F:Anori.WinUI.Commands.CanExecuteObservers.CommandManagerObserver.dictionary">
            <summary>
                The dictionary.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.CanExecuteObservers.CommandManagerObserver.Observer">
            <summary>
                Gets the observer.
            </summary>
            <value>
                The observer.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.CommandManagerObserver.Add(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver)">
            <summary>
                Adds the specified observer.
            </summary>
            <param name="observer">The observer.</param>
            <exception cref="T:System.ArgumentNullException">observer is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.CommandManagerObserver.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.CommandManagerObserver.Remove(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver)">
            <summary>
                Removes the specified observer.
            </summary>
            <param name="observer">The observer.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.CommandManagerObserver.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="T:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`1">
            <summary>
            Property Observer Base.
            </summary>
            <typeparam name="TPropertyObserver">The type of the property observer.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubjectBase" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject" />
        </member>
        <member name="E:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`1.Update">
            <summary>
                Occurs when [can execute changed].
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`1.PropertyExpression">
            <summary>
                Gets or sets the property expression.
            </summary>
            <value>
                The property expression.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`1.Observer">
            <summary>
                Gets or sets the observer.
            </summary>
            <value>
                The observer.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`1.Observables">
            <summary>
                Gets the observables.
            </summary>
            <value>
                The observables.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`1.Add(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver)">
            <summary>
                Adds the specified observer.
            </summary>
            <param name="observer">The observer.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`1.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`1.Remove(Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver)">
            <summary>
                Removes the specified observer.
            </summary>
            <param name="observer">The observer.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`1.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`1.Subscribe">
            <summary>
                Subscribes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`1.Unsubscribe">
            <summary>
                Unsubscribes this instance.
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`2">
            <summary>
            Property Observer Base.
            </summary>
            <typeparam name="TPropertyObserver">The type of the property observer.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`1" />
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`2.Equals(Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase{`1},Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase{`1})">
            <summary>
                Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <paramref name="x" /> to compare.</param>
            <param name="y">The second object of type <paramref name="y" /> to compare.</param>
            <returns>
                <see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`2.Equals(Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase{`0,`1})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
                <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`2.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`2.GetHashCode(Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase{`0,`1})">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`2.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverFactory">
            <summary>
            Property Observer Factory.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverFactory.ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Observeses the property.
            </summary>
            <typeparam name="TResult">The type of the type.</typeparam>
            <param name="propertyExpression">The property expression.</param>
            <returns>The PropertyObserver.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverFactory.ObservesProperty``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Observeses the property.
            </summary>
            <typeparam name="TParameter">The type of the owner.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="propertyExpression">The property expression.</param>
            <returns>
            Result of ObservesProperty as PropertyObserver&lt;TParameter, TResult&gt;.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverFactory.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
            Observeses the can execute.
            </summary>
            <param name="canExecuteExpression">The can execute expression.</param>
            <returns>
            Result of ObservesCanExecute as CanExecuteObserver.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverFactory.ObservesCanExecute``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Observeses the can execute.
            </summary>
            <typeparam name="TParameter">The type of the owner.</typeparam>
            <param name="parameter">The owner.</param>
            <param name="canExecuteExpression">The can execute expression.</param>
            <returns>
            Result of ObservesCanExecute as CanExecuteObserver&lt;TParameter&gt;.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverFactory.ObservesCanExecute``2(``0,``1,System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Observeses the can execute.
            </summary>
            <typeparam name="TParameter1">The type of the parameter1.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2.</typeparam>
            <param name="parameter1">The parameter1.</param>
            <param name="parameter2">The parameter2.</param>
            <param name="canExecuteExpression">The can execute expression.</param>
            <returns>
            Result of ObservesCanExecute as CanExecuteObserver&lt;TParameter1, TParameter2&gt;.
            </returns>
        </member>
        <member name="T:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserver`3">
            <summary>
                Property Observer.
            </summary>
            <typeparam name="TParameter1">The type of the parameter1.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IPropertyObserver" />
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserver`3.#ctor(`0,`1,System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserver`3" /> class.
            </summary>
            <param name="parameter1">The parameter1.</param>
            <param name="parameter2">The parameter2.</param>
            <param name="propertyExpression">The property expression.</param>
            <exception cref="T:System.ArgumentNullException">parameter1 or parameter2 or propertyExpression is null.</exception>
        </member>
        <member name="E:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserver`3.Update">
            <summary>
                Occurs when [can execute changed].
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserver`3.Parameter1">
            <summary>
                Gets the parameter1.
            </summary>
            <value>
                The parameter1.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserver`3.Parameter2">
            <summary>
                Gets the parameter2.
            </summary>
            <value>
                The parameter2.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserver`3.Create(`0,`1,System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})">
            <summary>
                Creates the specified owner.
            </summary>
            <param name="parameter1">The parameter1.</param>
            <param name="parameter2">The parameter2.</param>
            <param name="propertyExpression">The property expression.</param>
            <returns>
                The Property Observer.
            </returns>
        </member>
        <member name="T:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserver`2">
            <summary>
                Property Observer.
            </summary>
            <typeparam name="TParameter1">The type of the parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IPropertyObserver" />
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserver`2.#ctor(`0,System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserver`2" /> class.
            </summary>
            <param name="parameter">The owner.</param>
            <param name="propertyExpression">The property expression.</param>
            <exception cref="T:System.ArgumentNullException">
                parameter1 or propertyExpression is null.
            </exception>
        </member>
        <member name="E:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserver`2.Update">
            <summary>
                Occurs when [can execute changed].
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserver`2.Parameter">
            <summary>
                Gets the parameter.
            </summary>
            <value>
                The parameter.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserver`2.Create(`0,System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
                Creates the specified owner.
            </summary>
            <param name="owner">The owner.</param>
            <param name="propertyExpression">The property expression.</param>
            <returns>The Property Observer.</returns>
        </member>
        <member name="T:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserver`1">
            <summary>
                Property Observer.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserverBase`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IPropertyObserver" />
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserver`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserver`1" /> class.
            </summary>
            <param name="propertyExpression">The property expression.</param>
            <exception cref="T:System.ArgumentNullException">propertyExpression is null.</exception>
        </member>
        <member name="E:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserver`1.Update">
            <summary>
                Occurs when [can execute changed].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.CanExecuteObservers.PropertyObserver`1.Create``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Creates the specified property expression.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="propertyExpression">The property expression.</param>
            <returns>The Property Observer.</returns>
            <exception cref="T:System.ArgumentNullException">propertyExpression is null.</exception>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand">
            <summary>
                Activatable Async CanExecute Observer Command.
            </summary>
            <seealso cref="T:Anori.WinUI.Commands.Commands.AsyncCommandBase" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IActivatableAsyncCommand" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.observers">
            <summary>
                The observers.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.isActive">
            <summary>
                The is active.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.Tasks.Task},System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observer or observer is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.Tasks.Task},System.Action{System.Exception})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.Tasks.Task},System.Boolean,System.Action{System.Exception})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.Tasks.Task},System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">canExecuteSubject or observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="observers">The observers.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.Tasks.Task},System.Boolean,System.Func{System.Boolean},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.Finalize">
            <summary>
                Finalizes an instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand" /> class.
            </summary>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.IsActiveChanged">
            <summary>
                Notifies that the value for <see cref="P:Anori.WinUI.Common.IActivated.IsActive" /> property has changed.
            </summary>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.CanExecuteChanged">
            <summary>
                Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.IsActive">
            <summary>
                Gets a value indicating whether the object is active.
            </summary>
            <value>
                <see langword="true" /> if the object is active; otherwise <see langword="false" />.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.Activate">
            <summary>
                Activates this instance.
            </summary>
            <returns>The Self.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.Deactivate">
            <summary>
                Deactivates this instance.
            </summary>
            <returns>The Self.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.RaiseCanExecuteChanged">
            <summary>
                Raises the can execute changed.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.RaisePropertyChanged">
            <summary>
                Called when [can execute changed].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.Anori#Common#IActivatable{Anori#WinUI#Commands#Interfaces#IActivatableAsyncCommand}#Activate">
            <summary>
                Activates this instance.
            </summary>
            <returns>
                The Activatable Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.Anori#Common#IActivatable{Anori#WinUI#Commands#Interfaces#IActivatableAsyncCommand}#Deactivate">
            <summary>
                Deactivates this instance.
            </summary>
            <returns>The Activatable Async Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.Subscribe">
            <summary>
                Subscribes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand.Unsubscribe">
            <summary>
                Unsubscribes this instance.
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1">
            <summary>
                Activatable Async CanExecute Observer Command.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.Commands.AsyncCommandBase`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IActivatableAsyncCommand`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.observers">
            <summary>
                The observers.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.isActive">
            <summary>
                The is active.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observer
                or
                observer is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Action{System.Exception})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Boolean,System.Action{System.Exception})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="observers">The observers.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Predicate{`0},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observers
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Boolean,System.Predicate{`0},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.Finalize">
            <summary>
                Finalizes an instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.IsActiveChanged">
            <summary>
                Notifies that the value for <see cref="P:Anori.WinUI.Common.IActivated.IsActive" /> property has changed.
            </summary>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.CanExecuteChanged">
            <summary>
                Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.IsActive">
            <summary>
                Gets a value indicating whether the object is active.
            </summary>
            <value>
                <see langword="true" /> if the object is active; otherwise <see langword="false" />.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.Activate">
            <summary>
                Activates this instance.
            </summary>
            <returns>Activatable Async CanExecute Observer Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.Deactivate">
            <summary>
                Deactivates this instance.
            </summary>
            <returns>Activatable Async CanExecute Observer Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.RaiseCanExecuteChanged">
            <summary>
                Raises the can execute changed.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.RaisePropertyChanged">
            <summary>
                Called when [can execute changed].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.Anori#Common#IActivatable{Anori#WinUI#Commands#Interfaces#IActivatableAsyncCommand{T}}#Activate">
            <summary>
                Activates this instance.
            </summary>
            <returns>Activatable Async Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.Anori#Common#IActivatable{Anori#WinUI#Commands#Interfaces#IActivatableAsyncCommand{T}}#Deactivate">
            <summary>
                Deactivates this instance.
            </summary>
            <returns>Activatable Async Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.Subscribe">
            <summary>
                Subscribes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableAsyncCanExecuteObserverCommand`1.Unsubscribe">
            <summary>
                Unsubscribes this instance.
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand">
            <summary>
                The Activatable Can Execute Observer Command class.
            </summary>
            <seealso cref="T:Anori.WinUI.Commands.Commands.SyncCommandBase" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IActivatableSyncCommand" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.observers">
            <summary>
                The observers.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.isActive">
            <summary>
                The is active.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.#ctor(System.Action,System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observer
                or
                observer is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.#ctor(System.Action,System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.#ctor(System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="observers">The observers.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.#ctor(System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.#ctor(System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.#ctor(System.Action,System.Func{System.Boolean},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observers
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.#ctor(System.Action,System.Boolean,System.Func{System.Boolean},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.Finalize">
            <summary>
                Finalizes an instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand" /> class.
            </summary>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.IsActiveChanged">
            <summary>
                Notifies that the value for <see cref="P:Anori.WinUI.Common.IActivated.IsActive" /> property has changed.
            </summary>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.CanExecuteChanged">
            <summary>
                Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.IsActive">
            <summary>
                Gets a value indicating whether the object is active.
            </summary>
            <value>
                <see langword="true" /> if the object is active; otherwise <see langword="false" />.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.Activate">
            <summary>
                Activates this instance.
            </summary>
            <returns>Activatable Can Execute Observer Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.CanExecute">
            <summary>
                Determines whether this instance can execute.
            </summary>
            <returns>
                <c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.Deactivate">
            <summary>
                Deactivates this instance.
            </summary>
            <returns>Activatable Can Execute Observer Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.RaisePropertyChanged">
            <summary>
                Called when [can execute changed].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.Anori#Common#IActivatable{Anori#WinUI#Commands#Interfaces#IActivatableSyncCommand}#Activate">
            <summary>
                Activates this instance.
            </summary>
            <returns>Activatable Sync Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.Anori#Common#IActivatable{Anori#WinUI#Commands#Interfaces#IActivatableSyncCommand}#Deactivate">
            <summary>
                Deactivates this instance.
            </summary>
            <returns>Activatable Sync Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.Subscribe">
            <summary>
                Subscribes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand.Unsubscribe">
            <summary>
                Unsubscribes this instance.
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1">
            <summary>
                Activatable CanExecute Observer Command with generic parameter.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.Commands.SyncCommandBase`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IActivatableSyncCommand`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.observers">
            <summary>
                The observers.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.isActive">
            <summary>
                The is active.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.#ctor(System.Action{`0},System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.#ctor(System.Action{`0},System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observer
                or
                observer is null.
            </exception>
            <exception cref="T:System.ArgumentException">propertyObserver is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.#ctor(System.Action{`0},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="observers">The observers.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.#ctor(System.Action{`0},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.#ctor(System.Action{`0},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.#ctor(System.Action{`0},System.Predicate{`0},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.#ctor(System.Action{`0},System.Boolean,System.Predicate{`0},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observers
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.Finalize">
            <summary>
                Finalizes an instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1" /> class.
            </summary>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.IsActiveChanged">
            <summary>
                Notifies that the value for <see cref="P:Anori.WinUI.Common.IActivated.IsActive" /> property has changed.
            </summary>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.CanExecuteChanged">
            <summary>
                Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.IsActive">
            <summary>
                Gets a value indicating whether the object is active.
            </summary>
            <value>
                <see langword="true" /> if the object is active; otherwise <see langword="false" />.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.Activate">
            <summary>
                Activates this instance.
            </summary>
            <returns>Activatable CanExecute Observer Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.Deactivate">
            <summary>
                Deactivates this instance.
            </summary>
            <returns>Activatable CanExecute Observer Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.RaisePropertyChanged">
            <summary>
                Called when [can execute changed].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.Anori#Common#IActivatable{Anori#WinUI#Commands#Interfaces#IActivatableSyncCommand{T}}#Activate">
            <summary>
                Activates this instance.
            </summary>
            <returns>Activatable Sync Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.Anori#Common#IActivatable{Anori#WinUI#Commands#Interfaces#IActivatableSyncCommand{T}}#Deactivate">
            <summary>
                Deactivates this instance.
            </summary>
            <returns>Activatable Sync Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.Subscribe">
            <summary>
                Subscribes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableCanExecuteObserverCommand`1.Unsubscribe">
            <summary>
                Unsubscribes this instance.
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand">
            <summary>
                The Activatable Concurrency Asynchronous Can Execute Observer Command class.
            </summary>
            <seealso cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IActivatableConcurrencyAsyncCommand" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.observers">
            <summary>
                The observers.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.isActive">
            <summary>
                The is active.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observer
                or
                observer is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Boolean},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observers
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Boolean},System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,System.Func{System.Boolean},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,System.Func{System.Boolean},System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecute">The can execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.IsActiveChanged">
            <summary>
                Notifies that the value for <see cref="P:Anori.WinUI.Common.IActivated.IsActive" /> property has changed.
            </summary>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.CanExecuteChanged">
            <summary>
                Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.IsActive">
            <summary>
                Gets a value indicating whether the object is active.
            </summary>
            <value>
                <see langword="true" /> if the object is active; otherwise <see langword="false" />.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.Activate">
            <summary>
                Activates this instance.
            </summary>
            <returns>Activatable Concurrency Async Can Execute Observer Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.Deactivate">
            <summary>
                Deactivates this instance.
            </summary>
            <returns>Activatable Concurrency Async Can Execute Observer Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.RaiseCanExecuteCommand">
            <summary>
                Raises the can execute command.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.RaisePropertyChanged">
            <summary>
                Called when [can execute changed].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.Anori#Common#IActivatable{Anori#WinUI#Commands#Interfaces#IActivatableConcurrencyAsyncCommand}#Activate">
            <summary>
                Activates this instance.
            </summary>
            <returns>
                Activatable Concurrency Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.Anori#Common#IActivatable{Anori#WinUI#Commands#Interfaces#IActivatableConcurrencyAsyncCommand}#Deactivate">
            <summary>
                Deactivates this instance.
            </summary>
            <returns>
                Activatable Concurrency Async Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.Subscribe">
            <summary>
                Subscribes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand.Unsubscribe">
            <summary>
                Unsubscribes this instance.
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1">
            <summary>
                Activatable Concurrency Async CanExecuteObserver Command.
            </summary>
            <typeparam name="T">Parameter Type.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IActivatableConcurrencyAsyncCommand`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.observers">
            <summary>
                The observers.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.isActive">
            <summary>
                The is active.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observer
                or
                observer is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Predicate{`0},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observers
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Predicate{`0},System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,System.Predicate{`0},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,System.Predicate{`0},System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecute">The can execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.IsActiveChanged">
            <summary>
                Notifies that the value for <see cref="P:Anori.WinUI.Common.IActivated.IsActive" /> property has changed.
            </summary>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.CanExecuteChanged">
            <summary>
                Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.IsActive">
            <summary>
                Gets a value indicating whether the object is active.
            </summary>
            <value>
                <see langword="true" /> if the object is active; otherwise <see langword="false" />.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.Activate">
            <summary>
                Activates this instance.
            </summary>
            <returns>Activatable Concurrency Async Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.Deactivate">
            <summary>
                Deactivates this instance.
            </summary>
            <returns>Activatable Concurrency Async Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.RaiseCanExecuteCommand">
            <summary>
                Raises the can execute command.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.RaisePropertyChanged">
            <summary>
                Called when [can execute changed].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.Anori#Common#IActivatable{Anori#WinUI#Commands#Interfaces#IActivatableConcurrencyAsyncCommand{T}}#Activate">
            <summary>
                Activates this instance.
            </summary>
            <returns>Activatable Concurrency Async Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.Anori#Common#IActivatable{Anori#WinUI#Commands#Interfaces#IActivatableConcurrencyAsyncCommand{T}}#Deactivate">
            <summary>
                Deactivates this instance.
            </summary>
            <returns>Activatable Concurrency Async Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.Subscribe">
            <summary>
                Subscribes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyAsyncCanExecuteObserverCommand`1.Unsubscribe">
            <summary>
                Unsubscribes this instance.
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand">
            <summary>
                Activatable Concurrency CanExecute Observer Command.
            </summary>
            <seealso cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IActivatableConcurrencySyncCommand" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.observers">
            <summary>
                The observers.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.isActive">
            <summary>
                The is active.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.#ctor(System.Action{System.Threading.CancellationToken},System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observer
                or
                observer is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.#ctor(System.Action{System.Threading.CancellationToken},System.Boolean,System.Action,System.Action{System.Exception},System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.#ctor(System.Action{System.Threading.CancellationToken},System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.#ctor(System.Action{System.Threading.CancellationToken},System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Action,System.Action{System.Exception},System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.#ctor(System.Action{System.Threading.CancellationToken})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.#ctor(System.Action{System.Threading.CancellationToken},System.Action,System.Action{System.Exception},System.Action)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.#ctor(System.Action{System.Threading.CancellationToken},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.#ctor(System.Action{System.Threading.CancellationToken},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Action,System.Action{System.Exception},System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.#ctor(System.Action{System.Threading.CancellationToken},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.#ctor(System.Action{System.Threading.CancellationToken},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Action,System.Action{System.Exception},System.Action)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.#ctor(System.Action{System.Threading.CancellationToken},System.Func{System.Boolean},System.Action,System.Action{System.Exception},System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observers
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.#ctor(System.Action{System.Threading.CancellationToken},System.Boolean,System.Func{System.Boolean},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.#ctor(System.Action{System.Threading.CancellationToken},System.Boolean,System.Func{System.Boolean},System.Action,System.Action{System.Exception},System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecute">The can execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.CanExecuteChanged">
            <summary>
                Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.IsActiveChanged">
            <summary>
                Notifies that the value for <see cref="P:Anori.WinUI.Common.IActivated.IsActive" /> property has changed.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.IsActive">
            <summary>
                Gets a value indicating whether the object is active.
            </summary>
            <value>
                <see langword="true" /> if the object is active; otherwise <see langword="false" />.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.Activate">
            <summary>
                Activates this instance.
            </summary>
            <returns>Activatable Concurrency CanExecute Observer Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.Deactivate">
            <summary>
                Deactivates this instance.
            </summary>
            <returns>Activatable Concurrency CanExecute Observer Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.RaiseCanExecuteCommand">
            <summary>
                Raises the can execute command.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.RaisePropertyChanged">
            <summary>
                Called when [can execute changed].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.Anori#Common#IActivatable{Anori#WinUI#Commands#Interfaces#IActivatableConcurrencySyncCommand}#Activate">
            <summary>
                Activates this instance.
            </summary>
            <returns>Activatable Concurrency Sync Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.Anori#Common#IActivatable{Anori#WinUI#Commands#Interfaces#IActivatableConcurrencySyncCommand}#Deactivate">
            <summary>
                Deactivates this instance.
            </summary>
            <returns>
                Activatable Concurrency Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.Subscribe">
            <summary>
                Subscribes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand.Unsubscribe">
            <summary>
                Unsubscribes this instance.
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1">
            <summary>
                Activatable Concurrency CanExecute Observer Command.
            </summary>
            <typeparam name="T">Parameter Type.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IActivatableConcurrencySyncCommand`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.observers">
            <summary>
                The observers.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.isActive">
            <summary>
                The is active.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken},System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observer or observer is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken},System.Boolean,System.Action,System.Action{System.Exception},System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken},System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">canExecuteSubject or observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken},System.Boolean,Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Action,System.Action{System.Exception},System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken},System.Action,System.Action{System.Exception},System.Action)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Action,System.Action{System.Exception},System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Action,System.Action{System.Exception},System.Action)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken},System.Predicate{`0},System.Action,System.Action{System.Exception},System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observers
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken},System.Predicate{`0},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken},System.Boolean,System.Predicate{`0},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers in null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken},System.Boolean,System.Predicate{`0},System.Action,System.Action{System.Exception},System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="autoActivate">if set to <c>true</c> [automatic activate].</param>
            <param name="canExecute">The can execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.IsActiveChanged">
            <summary>
                Notifies that the value for <see cref="P:Anori.WinUI.Common.IActivated.IsActive" /> property has changed.
            </summary>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.CanExecuteChanged">
            <summary>
                Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.IsActive">
            <summary>
                Gets a value indicating whether the object is active.
            </summary>
            <value>
                <see langword="true" /> if the object is active; otherwise <see langword="false" />.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.Activate">
            <summary>
                Activates this instance.
            </summary>
            <returns>Activatable Concurrency CanExecute Observer Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.Deactivate">
            <summary>
                Deactivates this instance.
            </summary>
            <returns>Activatable Concurrency CanExecute Observer Command.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.RaiseCanExecuteCommand">
            <summary>
                Raises the can execute command.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.RaisePropertyChanged">
            <summary>
                Called when [can execute changed].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.Anori#Common#IActivatable{Anori#WinUI#Commands#Interfaces#IActivatableConcurrencySyncCommand{T}}#Activate">
            <summary>
                Activates this instance.
            </summary>
            <returns>
                Activatable Concurrency Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.Anori#Common#IActivatable{Anori#WinUI#Commands#Interfaces#IActivatableConcurrencySyncCommand{T}}#Deactivate">
            <summary>
                Deactivates this instance.
            </summary>
            <returns>
                Activatable Concurrency Sync Command.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.Subscribe">
            <summary>
                Subscribes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ActivatableConcurrencyCanExecuteObserverCommand`1.Unsubscribe">
            <summary>
                Unsubscribes this instance.
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand">
            <summary>
                Async CanExecute Observer Command.
            </summary>
            <seealso cref="T:Anori.WinUI.Commands.Commands.AsyncCommandBase" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand.observers">
            <summary>
                The observers.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observer
                or
                observer is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.Tasks.Task},System.Action{System.Exception})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand.Finalize">
            <summary>
                Finalizes an instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand" /> class.
            </summary>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand.CanExecuteChanged">
            <summary>
                Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand.RaiseCanExecuteChanged">
            <summary>
                Raises the can execute changed.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand.RaisePropertyChanged">
            <summary>
                Called when [can execute changed].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand.Subscribe">
            <summary>
                Subscribes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand.Unsubscribe">
            <summary>
                Unsubscribes this instance.
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand`1">
            <summary>
                Async CanExecute Observer Command.
            </summary>
            <typeparam name="T">Parameter Type.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.Commands.AsyncCommandBase`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand`1.observers">
            <summary>
                The observers.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observer
                or
                observer is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Action{System.Exception})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Predicate{`0},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand`1.Finalize">
            <summary>
                Finalizes an instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand`1" /> class.
            </summary>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand`1.CanExecuteChanged">
            <summary>
                Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand`1.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand`1.RaiseCanExecuteChanged">
            <summary>
                Raises the can execute changed.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand`1.RaisePropertyChanged">
            <summary>
                Called when [can execute changed].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand`1.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand`1.Subscribe">
            <summary>
                Subscribes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCanExecuteObserverCommand`1.Unsubscribe">
            <summary>
                Unsubscribes this instance.
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.AsyncCommandBase">
            <summary>
                AsyncCommandBase class.
            </summary>
            <seealso cref="T:Anori.WinUI.Commands.Commands.CommandBase" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IAsyncCommand`1" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.AsyncCommandBase.canExecute">
            <summary>
                The can execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.AsyncCommandBase.error">
            <summary>
                The error handler.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.AsyncCommandBase.execute">
            <summary>
                The execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.AsyncCommandBase.isExecuting">
            <summary>
                The is executing.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase.#ctor(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean},System.Action{System.Exception})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCommandBase" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="error">The error handler.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase.#ctor(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCommandBase" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase.#ctor(System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCommandBase" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <exception cref="T:System.ArgumentNullException">canExecuteSubject is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase.#ctor(System.Func{System.Threading.Tasks.Task},System.Action{System.Exception})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCommandBase" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="error">The error.</param>
            <exception cref="T:System.ArgumentNullException">errorHandler is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase.#ctor(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCommandBase" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <exception cref="T:System.ArgumentNullException">execute is null.</exception>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.AsyncCommandBase.PropertyChanged">
            <summary>
                Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.AsyncCommandBase.IsExecuting">
            <summary>
                Gets a value indicating whether this instance is executing.
            </summary>
            <value>
                <c>true</c> if this instance is executing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.AsyncCommandBase.HasCanExecute">
            <summary>
                Gets a value indicating whether this instance has can execute.
            </summary>
            <value>
                <c>true</c> if this instance has can execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase.CanExecute">
            <summary>
                Determines whether this instance can execute the specified parameter.
            </summary>
            <returns>
                <c>true</c> if this instance can execute the specified parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase.ExecuteAsync">
            <summary>
                Executes the asynchronous.
            </summary>
            <returns>A task object that can be awaited.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase.RaiseCanExecuteChanged">
            <summary>
                Raises the can execute changed.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase.CanExecute(System.Object)">
            <summary>
                Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
                <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase.Execute(System.Object)">
            <summary>
                Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.
            </summary>
            <param name="parameter">Command Parameter.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase.RaisePropertyChanged(System.String)">
            <summary>
                Called when [property changed].
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.AsyncCommandBase`1">
            <summary>
                AsyncCommandBase class.
            </summary>
            <typeparam name="T">Parameter Type.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.Commands.CommandBase" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IAsyncCommand`1" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.AsyncCommandBase`1.canExecute">
            <summary>
                The can execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.AsyncCommandBase`1.error">
            <summary>
                The error handler.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.AsyncCommandBase`1.execute">
            <summary>
                The execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.AsyncCommandBase`1.isExecuting">
            <summary>
                The is executing.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Predicate{`0},System.Action{System.Exception})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCommandBase`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="error">The error.</param>
            <exception cref="T:System.ArgumentNullException">error is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Predicate{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCommandBase`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCommandBase`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <exception cref="T:System.ArgumentNullException">canExecuteSubject is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Action{System.Exception})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCommandBase`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="error">The error.</param>
            <exception cref="T:System.ArgumentNullException">errorHandler in null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.AsyncCommandBase`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <exception cref="T:System.ArgumentNullException">execute is null.</exception>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.AsyncCommandBase`1.PropertyChanged">
            <summary>
                Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.AsyncCommandBase`1.IsExecuting">
            <summary>
                Gets a value indicating whether this instance is executing.
            </summary>
            <value>
                <c>true</c> if this instance is executing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.AsyncCommandBase`1.HasCanExecute">
            <summary>
                Gets a value indicating whether this instance has can execute.
            </summary>
            <value>
                <c>true</c> if this instance has can execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase`1.CanExecute(`0)">
            <summary>
                Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
                <c>true</c> if this instance can execute the specified parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase`1.ExecuteAsync(`0)">
            <summary>
                Executes the asynchronous.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>Async Task.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase`1.RaiseCanExecuteChanged">
            <summary>
                Raises the can execute changed.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase`1.CanExecute(System.Object)">
            <summary>
                Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
                <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase`1.Execute(System.Object)">
            <summary>
                Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.
            </summary>
            <param name="parameter">Command Parameter.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.AsyncCommandBase`1.RaisePropertyChanged(System.String)">
            <summary>
                Called when [property changed].
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand">
            <summary>
                CanExecute Observer Command.
            </summary>
            <seealso cref="T:Anori.WinUI.Commands.Commands.SyncCommandBase" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand.observers">
            <summary>
                The observers.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand.#ctor(System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observer
                or
                observer is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand.#ctor(System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand.#ctor(System.Action,System.Func{System.Boolean},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand.Finalize">
            <summary>
                Finalizes an instance of the <see cref="T:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand" /> class.
            </summary>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand.CanExecuteChanged">
            <summary>
                Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand.RaisePropertyChanged">
            <summary>
                Called when [can execute changed].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand.Subscribe">
            <summary>
                Subscribes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand.Unsubscribe">
            <summary>
                Unsubscribes this instance.
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand`1">
            <summary>
                CanExecute Observer Command.
            </summary>
            <typeparam name="T">Parameter Type.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.Commands.SyncCommandBase`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand`1.observers">
            <summary>
                The observers.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand`1.#ctor(System.Action{`0},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand`1.#ctor(System.Action{`0},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observer
                or
                observer is null.
            </exception>
            <exception cref="T:System.ArgumentException">propertyObserver is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand`1.#ctor(System.Action{`0},System.Predicate{`0},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observers
                or
                observers is null.
            </exception>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand`1.CanExecuteChanged">
            <summary>
                Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand`1.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand`1.RaisePropertyChanged">
            <summary>
                Called when [can execute changed].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand`1.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand`1.Subscribe">
            <summary>
                Subscribes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CanExecuteObserverCommand`1.Unsubscribe">
            <summary>
                Unsubscribes this instance.
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.CommandBase">
            <summary>
                Command Base.
            </summary>
            <seealso cref="T:System.Windows.Input.ICommand" />
            <seealso cref="T:Anori.Extensions.Threading.IDispatchableContext" />
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CommandBase.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.CommandBase" /> class.
            </summary>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.CommandBase.CanExecuteChanged">
            <summary>
                Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.CommandBase.SynchronizationContext">
            <summary>
                Gets the synchronization context.
            </summary>
            <value>
                The synchronization context.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.CommandBase.HasCanExecute">
            <summary>
                Gets a value indicating whether this instance has can execute.
            </summary>
            <value>
                <c>true</c> if this instance has can execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CommandBase.CanExecute(System.Object)">
            <summary>
                Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
                <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CommandBase.Execute(System.Object)">
            <summary>
                Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.
            </summary>
            <param name="parameter">Command Parameter.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CommandBase.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
                Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">
                Data used by the command.  If the command does not require data to be passed, this object can
                be set to <see langword="null" />.
            </param>
            <returns>
                <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.CommandBase.System#Windows#Input#ICommand#Execute(System.Object)">
            <inheritdoc />
            <summary>
                Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">
                Data used by the command.  If the command does not require data to be passed, this object can
                be set to <see langword="null" />.
            </param>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand">
            <summary>
                The Concurrency Asynchronous Can Execute Observer Command class.
            </summary>
            <seealso cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand.observers">
            <summary>
                The observers.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observer
                or
                observer is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observersis null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Boolean},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Boolean},System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand.CanExecuteChanged">
            <summary>
                Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand.RaiseCanExecuteCommand">
            <summary>
                Raises the can execute command.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand.RaisePropertyChanged">
            <summary>
                Called when [can execute changed].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand.Subscribe">
            <summary>
                Subscribes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand.Unsubscribe">
            <summary>
                Unsubscribes this instance.
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1">
            <summary>
                The Concurrency Asynchronous Can Execute Observer Command class.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1.observers">
            <summary>
                The observers.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observer
                or
                observer is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Predicate{`0},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Predicate{`0},System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1.CanExecuteChanged">
            <summary>
                Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1.RaiseCanExecuteCommand">
            <summary>
                Raises the can execute command.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1.RaisePropertyChanged">
            <summary>
                Called when [can execute changed].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1.Subscribe">
            <summary>
                Subscribes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCanExecuteObserverCommand`1.Unsubscribe">
            <summary>
                Unsubscribes this instance.
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase">
            <summary>
                The Concurrency Asynchronous Command Base class.
            </summary>
            <seealso cref="T:Anori.WinUI.Commands.Commands.CommandBase" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IConcurrencyAsyncCommand" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IExecutable" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
            <seealso cref="T:System.Windows.Input.ICommand" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.cancel">
            <summary>
                The cancel.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.cancelCommand">
            <summary>
                The cancel command.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.canExecute">
            <summary>
                The can execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.completed">
            <summary>
                The completed.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.error">
            <summary>
                The error.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.execute">
            <summary>
                The execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.finallyTaskScheduler">
            <summary>
                The finally task scheduler.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.postTaskScheduler">
            <summary>
                The post actions task scheduler.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.taskFactory">
            <summary>
                The task factory.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.taskScheduler">
            <summary>
                The actions task scheduler.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.canCancel">
            <summary>
                The can cancel.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.cancellationTokenSource">
            <summary>
                The cancellation token source.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.exception">
            <summary>
                The exception.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.isExecuting">
            <summary>
                The is execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.task">
            <summary>
                The task.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.wasCanceled">
            <summary>
                The is canceled.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.wasFaulty">
            <summary>
                The has errors.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.wasSuccessfuly">
            <summary>
                The was successfuly.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Boolean},System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <exception cref="T:System.ArgumentNullException">canExecuteSubject is null.</exception>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.PropertyChanged">
            <summary>
                Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.CanCancel">
            <summary>
                Gets or sets a value indicating whether this instance can cancel.
            </summary>
            <value>
                <c>true</c> if this instance can cancel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.CancelCommand">
            <summary>
                Gets the cancel command.
            </summary>
            <value>
                The cancel command.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.Exception">
            <summary>
                Gets the exception.
            </summary>
            <value>
                The exception.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.WasFaulty">
            <summary>
                Gets a value indicating whether this instance has errors.
            </summary>
            <value>
                <c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.IsExecuting">
            <summary>
                Gets a value indicating whether this instance is execute.
            </summary>
            <value>
                <c>true</c> if this instance is execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.WasCanceled">
            <summary>
                Gets a value indicating whether this instance is canceled.
            </summary>
            <value>
                <c>true</c> if this instance is canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.WasSuccessfuly">
            <summary>
                Gets or sets a value indicating whether [was successful].
            </summary>
            <value>
                <c>true</c> if [was successful]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.HasCanExecute">
            <summary>
                Gets a value indicating whether this instance has can execute.
            </summary>
            <value>
                <c>true</c> if this instance has can execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.Cancel">
            <summary>
                Cancels this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.CanExecute">
            <summary>
                Determines whether this instance can execute.
            </summary>
            <returns>
                <c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.Dispose">
            <inheritdoc />
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.Execute">
            <summary>
                Executes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
                Executes the asynchronous.
            </summary>
            <param name="token">The token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.RaiseCanExecuteCancelCommand">
            <summary>
                Raises the can execute cancel command.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.RaiseCanExecuteCommand">
            <summary>
                Raises the can execute command.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.CanExecute(System.Object)">
            <summary>
                Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
                <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.Execute(System.Object)">
            <summary>
                Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.
            </summary>
            <param name="parameter">Command Parameter.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.RaisePropertyChanged(System.String)">
            <summary>
                Raises the property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
                Sets the property.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="storage">The storage.</param>
            <param name="value">The value.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>Is set.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.OnAction(System.Threading.CancellationToken)">
            <summary>
                Called when [execute].
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.OnBegin">
            <summary>
                Called when [begin].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.OnCanceled">
            <summary>
                Called when [canceled].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.OnFaulted(System.Exception)">
            <summary>
                Called when [faulted].
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.OnFinally">
            <summary>
                Called when [finally].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.OnPostAction(System.Threading.Tasks.Task)">
            <summary>
                Called when [post execute].
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase.OnRanToCompletion">
            <summary>
                Called when [ran to completion].
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1">
            <summary>
                The Concurrency Asynchronous Command Base class.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.Commands.CommandBase" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IConcurrencyAsyncCommand`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IExecutable" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
            <seealso cref="T:System.Windows.Input.ICommand" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.cancel">
            <summary>
                The cancel.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.cancelCommand">
            <summary>
                The cancel command.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.canExecute">
            <summary>
                The can execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.completed">
            <summary>
                The completed.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.error">
            <summary>
                The error.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.execute">
            <summary>
                The execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.finallyTaskScheduler">
            <summary>
                The finally task scheduler.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.postTaskScheduler">
            <summary>
                The post actions task scheduler.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.taskFactory">
            <summary>
                The task factory.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.taskScheduler">
            <summary>
                The actions task scheduler.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.cancellationTokenSource">
            <summary>
                The cancellation token source.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.exception">
            <summary>
                The exception.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.isExecuting">
            <summary>
                The is execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.task">
            <summary>
                The task.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.wasCanceled">
            <summary>
                The is canceled.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.wasFaulty">
            <summary>
                The has errors.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.wasSuccessfuly">
            <summary>
                The was successfuly.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Predicate{`0},System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <exception cref="T:System.ArgumentNullException">canExecuteSubject is null.</exception>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.PropertyChanged">
            <summary>
                Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.CancelCommand">
            <summary>
                Gets the cancel command.
            </summary>
            <value>
                The cancel command.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.Exception">
            <summary>
                Gets the exception.
            </summary>
            <value>
                The exception.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.WasFaulty">
            <summary>
                Gets a value indicating whether this instance has errors.
            </summary>
            <value>
                <c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.IsExecuting">
            <summary>
                Gets a value indicating whether this instance is execute.
            </summary>
            <value>
                <c>true</c> if this instance is execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.WasCanceled">
            <summary>
                Gets a value indicating whether this instance is canceled.
            </summary>
            <value>
                <c>true</c> if this instance is canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.WasSuccessfuly">
            <summary>
                Gets or sets a value indicating whether [was successful].
            </summary>
            <value>
                <c>true</c> if [was successful]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.HasCanExecute">
            <summary>
                Gets a value indicating whether this instance has can execute.
            </summary>
            <value>
                <c>true</c> if this instance has can execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.Cancel">
            <summary>
                Cancels this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.CanExecute(`0)">
            <summary>
                Determines whether this instance can execute.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
                <c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.Dispose">
            <inheritdoc />
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.Execute(`0)">
            <summary>
                Executes this instance.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.ExecuteAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Executes the asynchronous.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="token">The token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.RaiseCanExecuteCancelCommand">
            <summary>
                Raises the can execute cancel command.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.RaiseCanExecuteCommand">
            <summary>
                Raises the can execute command.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.CanExecute(System.Object)">
            <summary>
                Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>The CanExecute Boolean.</returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.Execute(System.Object)">
            <summary>
                Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.
            </summary>
            <param name="parameter">Command Parameter.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.RaisePropertyChanged(System.String)">
            <summary>
                Raises the property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.SetProperty``1(``0@,``0,System.String)">
            <summary>
                Sets the property.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="storage">The storage.</param>
            <param name="value">The value.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
                Is set.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.OnAction(`0,System.Threading.CancellationToken)">
            <summary>
                Called when [execute].
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.OnBegin">
            <summary>
                Called when [begin].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.OnCanceled">
            <summary>
                Called when [canceled].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.OnFaulted(System.Exception)">
            <summary>
                Called when [faulted].
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.OnFinally">
            <summary>
                Called when [finally].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.OnPostAction(System.Threading.Tasks.Task)">
            <summary>
                Called when [post execute].
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyAsyncCommandBase`1.OnRanToCompletion">
            <summary>
                Called when [ran to completion].
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand">
            <summary>
                The Concurrency Can Execute Observer Command class.
            </summary>
            <seealso cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IConcurrencySyncCommand" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand.observers">
            <summary>
                The observers.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand.#ctor(System.Action{System.Threading.CancellationToken},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observer
                or
                observer is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand.#ctor(System.Action{System.Threading.CancellationToken},System.Action,System.Action{System.Exception},System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand.#ctor(System.Action{System.Threading.CancellationToken},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand.#ctor(System.Action{System.Threading.CancellationToken},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Action,System.Action{System.Exception},System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand.#ctor(System.Action{System.Threading.CancellationToken},System.Func{System.Boolean},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand.#ctor(System.Action{System.Threading.CancellationToken},System.Func{System.Boolean},System.Action,System.Action{System.Exception},System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand.CanExecuteChanged">
            <summary>
                Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand.RaiseCanExecuteCommand">
            <summary>
                Raises the can execute command.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand.RaisePropertyChanged">
            <summary>
                Called when [can execute changed].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand.Subscribe">
            <summary>
                Subscribes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand.Unsubscribe">
            <summary>
                Unsubscribes this instance.
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1">
            <summary>
                The Concurrency Can Execute Observer Command class.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IConcurrencySyncCommand`1" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ICanExecuteChangedObserver" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1.observers">
            <summary>
                The observers.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                observer
                or
                observer is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken},System.Action,System.Action{System.Exception},System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Action,System.Action{System.Exception},System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">
                canExecuteSubject
                or
                observers is null.
            </exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken},System.Predicate{`0},Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1.#ctor(System.Action{`0,System.Threading.CancellationToken},System.Predicate{`0},System.Action,System.Action{System.Exception},System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject[])">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <param name="observers">The observers.</param>
            <exception cref="T:System.ArgumentNullException">observers is null.</exception>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1.CanExecuteChanged">
            <summary>
                Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1.RaiseCanExecuteCommand">
            <summary>
                Raises the can execute command.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1.RaisePropertyChanged">
            <summary>
                Called when [can execute changed].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1.Subscribe">
            <summary>
                Subscribes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCanExecuteObserverCommand`1.Unsubscribe">
            <summary>
                Unsubscribes this instance.
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase">
            <summary>
                Asynchronous Relay Command.
            </summary>
            <seealso cref="T:System.Windows.Input.ICommand" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.cancel">
            <summary>
                The cancel.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.cancelCommand">
            <summary>
                The cancel command.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.canExecute">
            <summary>
                The can execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.completed">
            <summary>
                The completed.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.error">
            <summary>
                The error.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.execute">
            <summary>
                The execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.finallyTaskScheduler">
            <summary>
                The finally task scheduler.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.postTaskScheduler">
            <summary>
                The post actions task scheduler.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.taskFactory">
            <summary>
                The task factory.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.taskScheduler">
            <summary>
                The actions task scheduler.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.cancellationTokenSource">
            <summary>
                The cancellation token source.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.exception">
            <summary>
                The exception.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.isExecuting">
            <summary>
                The is execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.task">
            <summary>
                The task.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.wasCanceled">
            <summary>
                The is canceled.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.wasFaulty">
            <summary>
                The has errors.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.wasSuccessfuly">
            <summary>
                The was successfuly.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.#ctor(System.Action{System.Threading.CancellationToken},System.Func{System.Boolean},System.Action,System.Action{System.Exception},System.Action)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.#ctor(System.Action{System.Threading.CancellationToken},System.Action,System.Action{System.Exception},System.Action)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.#ctor(System.Action{System.Threading.CancellationToken},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Action,System.Action{System.Exception},System.Action)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <exception cref="T:System.ArgumentNullException">canExecuteSubject is null.</exception>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.PropertyChanged">
            <summary>
                Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.CancelCommand">
            <summary>
                Gets the cancel command.
            </summary>
            <value>
                The cancel command.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.Exception">
            <summary>
                Gets the exception.
            </summary>
            <value>
                The exception.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.WasFaulty">
            <summary>
                Gets a value indicating whether this instance has errors.
            </summary>
            <value>
                <c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.IsExecuting">
            <summary>
                Gets a value indicating whether this instance is execute.
            </summary>
            <value>
                <c>true</c> if this instance is execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.WasCanceled">
            <summary>
                Gets a value indicating whether this instance is canceled.
            </summary>
            <value>
                <c>true</c> if this instance is canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.WasSuccessfuly">
            <summary>
                Gets or sets a value indicating whether [was successful].
            </summary>
            <value>
                <c>true</c> if [was successful]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.HasCanExecute">
            <summary>
                Gets a value indicating whether this instance has can execute.
            </summary>
            <value>
                <c>true</c> if this instance has can execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.Cancel">
            <summary>
                Cancels this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.CanExecute">
            <summary>
                Determines whether this instance can execute.
            </summary>
            <returns>
                <c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.Dispose">
            <inheritdoc />
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.Execute(System.Threading.CancellationToken)">
            <summary>
                Executes the specified token.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.Execute">
            <summary>
                Executes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.RaiseCanExecuteCancelCommand">
            <summary>
                Raises the can execute cancel command.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.RaiseCanExecuteCommand">
            <summary>
                Raises the can execute command.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.CanExecute(System.Object)">
            <summary>
                Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
                <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.Execute(System.Object)">
            <summary>
                Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.
            </summary>
            <param name="parameter">Command Parameter.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.RaisePropertyChanged(System.String)">
            <summary>
                Raises the property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
                Sets the property.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="storage">The storage.</param>
            <param name="value">The value.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
                Property is set.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.OnAction(System.Threading.CancellationToken)">
            <summary>
                Called when [execute].
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.OnBegin">
            <summary>
                Called when [begin].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.OnCanceled">
            <summary>
                Called when [canceled].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.OnFaulted(System.Exception)">
            <summary>
                Called when [faulted].
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.OnFinally">
            <summary>
                Called when [finally].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.OnPostAction(System.Threading.Tasks.Task)">
            <summary>
                Called when [post execute].
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase.OnRanToCompletion">
            <summary>
                Called when [ran to completion].
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1">
            <summary>
                Asynchronous Relay Command.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <seealso cref="T:Anori.WinUI.Commands.Commands.CommandBase" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.ISyncCommand`1" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
            <seealso cref="T:System.Windows.Input.ICommand" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.cancel">
            <summary>
                The cancel.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.cancelCommand">
            <summary>
                The cancel command.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.canExecute">
            <summary>
                The can execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.completed">
            <summary>
                The completed.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.error">
            <summary>
                The error.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.execute">
            <summary>
                The execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.finallyTaskScheduler">
            <summary>
                The finally task scheduler.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.postTaskScheduler">
            <summary>
                The post actions task scheduler.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.taskFactory">
            <summary>
                The task factory.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.taskScheduler">
            <summary>
                The actions task scheduler.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.cancellationTokenSource">
            <summary>
                The cancellation token source.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.exception">
            <summary>
                The exception.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.isExecuting">
            <summary>
                The is execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.task">
            <summary>
                The task.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.wasCanceled">
            <summary>
                The is canceled.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.wasFaulty">
            <summary>
                The has errors.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.wasSuccessfuly">
            <summary>
                The was successfuly.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.#ctor(System.Action{`0,System.Threading.CancellationToken},System.Predicate{`0},System.Action,System.Action{System.Exception},System.Action)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.#ctor(System.Action{`0,System.Threading.CancellationToken},System.Action,System.Action{System.Exception},System.Action)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.#ctor(System.Action{`0,System.Threading.CancellationToken},Anori.WinUI.Commands.Interfaces.ICanExecuteSubject,System.Action,System.Action{System.Exception},System.Action)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="cancel">The cancel.</param>
            <exception cref="T:System.ArgumentNullException">canExecuteSubject is null.</exception>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.PropertyChanged">
            <summary>
                Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.CancelCommand">
            <summary>
                Gets the cancel command.
            </summary>
            <value>
                The cancel command.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.Exception">
            <summary>
                Gets the exception.
            </summary>
            <value>
                The exception.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.WasFaulty">
            <summary>
                Gets a value indicating whether this instance has errors.
            </summary>
            <value>
                <c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.IsExecuting">
            <summary>
                Gets a value indicating whether this instance is executing.
            </summary>
            <value>
                <c>true</c> if this instance is executing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.WasCanceled">
            <summary>
                Gets a value indicating whether this instance is canceled.
            </summary>
            <value>
                <c>true</c> if this instance is canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.WasSuccessfuly">
            <summary>
                Gets or sets a value indicating whether [was successful].
            </summary>
            <value>
                <c>true</c> if [was successful]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.HasCanExecute">
            <summary>
                Gets a value indicating whether this instance has can execute.
            </summary>
            <value>
                <c>true</c> if this instance has can execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.Cancel">
            <summary>
                Cancels this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.CanExecute(`0)">
            <summary>
                Determines whether this instance can execute.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
                <c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.Dispose">
            <inheritdoc />
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.Execute(`0,System.Threading.CancellationToken)">
            <summary>
                Executes the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.Execute(`0)">
            <summary>
                Executes this instance.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.RaiseCanExecuteCancelCommand">
            <summary>
                Raises the can execute cancel command.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.RaiseCanExecuteCommand">
            <summary>
                Raises the can execute command.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.CanExecute(System.Object)">
            <summary>
                Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
                <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.Execute(System.Object)">
            <summary>
                Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.
            </summary>
            <param name="parameter">Command Parameter.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.RaisePropertyChanged(System.String)">
            <summary>
                Raises the property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.SetProperty``1(``0@,``0,System.String)">
            <summary>
                Sets the property.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="storage">The storage.</param>
            <param name="value">The value.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
                Result of SetProperty as Boolean.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.OnAction(`0,System.Threading.CancellationToken)">
            <summary>
                Called when [execute].
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.OnBegin">
            <summary>
                Called when [begin].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.OnCanceled">
            <summary>
                Called when [canceled].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.OnFaulted(System.Exception)">
            <summary>
                Called when [faulted].
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.OnFinally">
            <summary>
                Called when [finally].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.OnPostAction(System.Threading.Tasks.Task)">
            <summary>
                Called when [post execute].
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ConcurrencyCommandBase`1.OnRanToCompletion">
            <summary>
                Called when [ran to completion].
            </summary>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.DirectCommand">
            <summary>
                Direct Command.
            </summary>
            <seealso cref="T:Anori.WinUI.Commands.Commands.SyncCommandBase" />
            <seealso cref="T:Anori.WinUI.Commands.Interfaces.IRaiseCanExecuteCommand" />
            <seealso cref="T:System.Windows.Input.ICommand" />
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.DirectCommand.#ctor(System.Action)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.DirectCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <exception cref="T:System.ArgumentNullException">execute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.DirectCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.DirectCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.DirectCommand.CanExecuteChanged">
            <summary>
                Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="E:Anori.WinUI.Commands.Commands.DirectCommand.CanExecuteChangedInternal">
            <summary>
                Occurs when [can execute changed internal].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.DirectCommand.RaiseCanExecuteChanged">
            <summary>
                Called when [can execute changed].
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.DirectCommand.Subscribe(System.EventHandler)">
            <summary>
                Subscribes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.DirectCommand.Unsubscribe(System.EventHandler)">
            <summary>
                Unsubscribes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.ObservableCollectionExtensions">
            <summary>
                Observable Collection Extensions.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.ObservableCollectionExtensions.AddIfNotContains(System.Collections.Generic.IList{Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubjectBase},System.Collections.Generic.IEnumerable{Anori.WinUI.Commands.Interfaces.ICanExecuteChangedSubject})">
            <summary>
                Adds if not contains.
            </summary>
            <param name="observers">The observers.</param>
            <param name="newItems">The new items.</param>
            <exception cref="T:System.ArgumentNullException">observers - Observable item.</exception>
            <exception cref="T:System.ArgumentException">propertyObserver is null.</exception>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.SyncCommandBase">
            <summary>
                A Command whose sole purpose is to relay its functionality to other objects by invoking delegates.
                The default return value for the CanExecute method is 'true'.
            </summary>
            <seealso cref="T:System.Windows.Input.ICommand" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.SyncCommandBase.canExecute">
            <summary>
                The can execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.SyncCommandBase.execute">
            <summary>
                The execute.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.SyncCommandBase.#ctor(System.Action)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.SyncCommandBase" /> class and the Command can
                always be executed.
            </summary>
            <param name="execute">The execution logic.</param>
            <exception cref="T:System.ArgumentNullException">execute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.SyncCommandBase.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.SyncCommandBase" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.SyncCommandBase.#ctor(System.Action,Anori.WinUI.Commands.Interfaces.ICanExecuteSubject)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.SyncCommandBase" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecuteSubject">The can execute subject.</param>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.SyncCommandBase.HasCanExecute">
            <summary>
                Gets a value indicating whether this instance has can execute.
            </summary>
            <value>
                <c>true</c> if this instance has can execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.SyncCommandBase.CanExecute">
            <summary>
                Determines whether this instance can execute.
            </summary>
            <returns>
                <c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.SyncCommandBase.Execute">
            <summary>
                Executes this instance.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.SyncCommandBase.CanExecute(System.Object)">
            <summary>
                Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
                <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.SyncCommandBase.Execute(System.Object)">
            <summary>
                Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.
            </summary>
            <param name="parameter">Command Parameter.</param>
        </member>
        <member name="T:Anori.WinUI.Commands.Commands.SyncCommandBase`1">
            <summary>
                A Command whose sole purpose is to relay its functionality to other objects by invoking delegates.
                The default return value for the CanExecute method is 'true'.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <seealso cref="T:System.Windows.Input.ICommand" />
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.SyncCommandBase`1.canExecute">
            <summary>
                The can execute.
            </summary>
        </member>
        <member name="F:Anori.WinUI.Commands.Commands.SyncCommandBase`1.execute">
            <summary>
                The execute.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.SyncCommandBase`1.#ctor(System.Action{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.SyncCommandBase`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <exception cref="T:System.ArgumentNullException">execute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.SyncCommandBase`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.SyncCommandBase`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <exception cref="T:System.ArgumentNullException">canExecute is null.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.SyncCommandBase`1.#ctor(System.Action{`0},Anori.WinUI.Commands.Interfaces.ICanExecute)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Commands.SyncCommandBase`1" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
        </member>
        <member name="P:Anori.WinUI.Commands.Commands.SyncCommandBase`1.HasCanExecute">
            <summary>
                Gets a value indicating whether this instance has can execute.
            </summary>
            <value>
                <c>true</c> if this instance has can execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.SyncCommandBase`1.CanExecute(`0)">
            <summary>
                Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
                <c>true</c> if this instance can execute the specified parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.SyncCommandBase`1.Execute(`0)">
            <summary>
                Executes the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.SyncCommandBase`1.CanExecute(System.Object)">
            <summary>
                Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
                CanExecute result.
            </returns>
        </member>
        <member name="M:Anori.WinUI.Commands.Commands.SyncCommandBase`1.Execute(System.Object)">
            <summary>
                Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.
            </summary>
            <param name="parameter">Command Parameter.</param>
        </member>
        <member name="T:Anori.WinUI.Commands.Exceptions.CanExecuteFunctionAlreadyDefinedException">
            <summary>
                The Can Execute Function Already Defined Exception class.
            </summary>
            <seealso cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException" />
        </member>
        <member name="M:Anori.WinUI.Commands.Exceptions.CanExecuteFunctionAlreadyDefinedException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Exceptions.CanExecuteFunctionAlreadyDefinedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Exceptions.CanExecuteFunctionAlreadyDefinedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Exceptions.CanExecuteFunctionAlreadyDefinedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException">
            <summary>
                Command Builder Exception.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Anori.WinUI.Commands.Exceptions.CommandBuilderException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException" /> class.
            </summary>
            <param name="messgae">The messgae.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Exceptions.CommandBuilderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Anori.WinUI.Commands.Exceptions.NoCanExecuteException">
            <summary>
                No CanExecute Exception.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Anori.WinUI.Commands.Exceptions.NoCanExecuteException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Exceptions.NoCanExecuteException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Exceptions.NoCanExecuteException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Exceptions.NoCanExecuteException" /> class.
            </summary>
        </member>
        <member name="M:Anori.WinUI.Commands.Exceptions.NoCanExecuteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Exceptions.NoCanExecuteException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="T:Anori.WinUI.Commands.Exceptions.ObserverIsAlreadyBeingObservedException">
            <summary>
            The Observer Is Already Being Observed Exception class.
            </summary>
            <seealso cref="T:Anori.WinUI.Commands.Exceptions.CommandBuilderException" />
        </member>
        <member name="M:Anori.WinUI.Commands.Exceptions.ObserverIsAlreadyBeingObservedException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Exceptions.ObserverIsAlreadyBeingObservedException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Anori.WinUI.Commands.Exceptions.ObserverIsAlreadyBeingObservedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Anori.WinUI.Commands.Exceptions.ObserverIsAlreadyBeingObservedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Anori.WinUI.Commands.InverseBooleanConverter">
            <summary>
                The Inverse Boolean Converter class.
            </summary>
            <seealso cref="T:System.Windows.Data.IValueConverter" />
        </member>
        <member name="M:Anori.WinUI.Commands.InverseBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
                A converted value. If the method returns <see langword="null" />, the valid null value is used.
            </returns>
            <exception cref="T:System.InvalidOperationException">The target must be a boolean.</exception>
        </member>
        <member name="M:Anori.WinUI.Commands.InverseBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
                A converted value. If the method returns <see langword="null" />, the valid null value is used.
            </returns>
            <exception cref="T:System.NotSupportedException">Not Supported Exception.</exception>
        </member>
        <member name="T:Anori.WinUI.Commands.Resources.ExceptionStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Resources.ExceptionStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Resources.ExceptionStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Resources.ExceptionStrings.CanExecuteExpressionAlreadyDefined">
            <summary>
              Looks up a localized string similar to The CanExecute expression is already defined.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Resources.ExceptionStrings.CanExecuteFunctionAlreadyDefined">
            <summary>
              Looks up a localized string similar to The CanExecute function is already defined.
            </summary>
        </member>
        <member name="P:Anori.WinUI.Commands.Resources.ExceptionStrings.ObserverIsAlreadyBeingObserved">
            <summary>
              Looks up a localized string similar to {0} is already being observed..
            </summary>
        </member>
    </members>
</doc>
